//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Map"",
            ""id"": ""50934141-da1c-4faf-b357-0f5c6bc19e6d"",
            ""actions"": [
                {
                    ""name"": ""TapAction"",
                    ""type"": ""Button"",
                    ""id"": ""9c07ab25-d372-4340-86d7-978d1b2ede5a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hold"",
                    ""type"": ""Button"",
                    ""id"": ""cb0eabb3-9f1c-4f9c-bc13-6ec686f2912c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Press"",
                    ""type"": ""Button"",
                    ""id"": ""09bd3687-6177-4277-b8d6-818e82e99834"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Slowtap"",
                    ""type"": ""Button"",
                    ""id"": ""fb8dfe4e-87a1-4567-a3e0-6ffb1f32cab6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0a596797-8565-4812-8a29-51b9996c174d"",
                    ""path"": ""<Touchscreen>/touch1/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3699035-f8ef-49f3-8309-d7fd1212e84e"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""039bde35-34da-4070-977c-ff9ce578e488"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39d34dca-6985-4f48-905a-5691745c3fcc"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""SlowTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slowtap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Map
        m_Map = asset.FindActionMap("Map", throwIfNotFound: true);
        m_Map_TapAction = m_Map.FindAction("TapAction", throwIfNotFound: true);
        m_Map_Hold = m_Map.FindAction("Hold", throwIfNotFound: true);
        m_Map_Press = m_Map.FindAction("Press", throwIfNotFound: true);
        m_Map_Slowtap = m_Map.FindAction("Slowtap", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Map
    private readonly InputActionMap m_Map;
    private List<IMapActions> m_MapActionsCallbackInterfaces = new List<IMapActions>();
    private readonly InputAction m_Map_TapAction;
    private readonly InputAction m_Map_Hold;
    private readonly InputAction m_Map_Press;
    private readonly InputAction m_Map_Slowtap;
    public struct MapActions
    {
        private @InputActions m_Wrapper;
        public MapActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TapAction => m_Wrapper.m_Map_TapAction;
        public InputAction @Hold => m_Wrapper.m_Map_Hold;
        public InputAction @Press => m_Wrapper.m_Map_Press;
        public InputAction @Slowtap => m_Wrapper.m_Map_Slowtap;
        public InputActionMap Get() { return m_Wrapper.m_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapActions set) { return set.Get(); }
        public void AddCallbacks(IMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MapActionsCallbackInterfaces.Add(instance);
            @TapAction.started += instance.OnTapAction;
            @TapAction.performed += instance.OnTapAction;
            @TapAction.canceled += instance.OnTapAction;
            @Hold.started += instance.OnHold;
            @Hold.performed += instance.OnHold;
            @Hold.canceled += instance.OnHold;
            @Press.started += instance.OnPress;
            @Press.performed += instance.OnPress;
            @Press.canceled += instance.OnPress;
            @Slowtap.started += instance.OnSlowtap;
            @Slowtap.performed += instance.OnSlowtap;
            @Slowtap.canceled += instance.OnSlowtap;
        }

        private void UnregisterCallbacks(IMapActions instance)
        {
            @TapAction.started -= instance.OnTapAction;
            @TapAction.performed -= instance.OnTapAction;
            @TapAction.canceled -= instance.OnTapAction;
            @Hold.started -= instance.OnHold;
            @Hold.performed -= instance.OnHold;
            @Hold.canceled -= instance.OnHold;
            @Press.started -= instance.OnPress;
            @Press.performed -= instance.OnPress;
            @Press.canceled -= instance.OnPress;
            @Slowtap.started -= instance.OnSlowtap;
            @Slowtap.performed -= instance.OnSlowtap;
            @Slowtap.canceled -= instance.OnSlowtap;
        }

        public void RemoveCallbacks(IMapActions instance)
        {
            if (m_Wrapper.m_MapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MapActions @Map => new MapActions(this);
    public interface IMapActions
    {
        void OnTapAction(InputAction.CallbackContext context);
        void OnHold(InputAction.CallbackContext context);
        void OnPress(InputAction.CallbackContext context);
        void OnSlowtap(InputAction.CallbackContext context);
    }
}
