//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Drag"",
            ""id"": ""f348dd95-7ee8-46b3-878b-9f32727b8256"",
            ""actions"": [
                {
                    ""name"": ""Tap"",
                    ""type"": ""Value"",
                    ""id"": ""9932816d-a0d7-40af-a485-db21a9026265"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Press"",
                    ""type"": ""Value"",
                    ""id"": ""f31d8924-bfe0-47c5-a809-746ca28a139d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""75585e85-b9c6-4c9b-ba93-c0237c32b651"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a2b3602d-ec96-458d-b264-6a1ec6f2c1d4"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Drag
        m_Drag = asset.FindActionMap("Drag", throwIfNotFound: true);
        m_Drag_Tap = m_Drag.FindAction("Tap", throwIfNotFound: true);
        m_Drag_Press = m_Drag.FindAction("Press", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Drag
    private readonly InputActionMap m_Drag;
    private List<IDragActions> m_DragActionsCallbackInterfaces = new List<IDragActions>();
    private readonly InputAction m_Drag_Tap;
    private readonly InputAction m_Drag_Press;
    public struct DragActions
    {
        private @InputActions m_Wrapper;
        public DragActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tap => m_Wrapper.m_Drag_Tap;
        public InputAction @Press => m_Wrapper.m_Drag_Press;
        public InputActionMap Get() { return m_Wrapper.m_Drag; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DragActions set) { return set.Get(); }
        public void AddCallbacks(IDragActions instance)
        {
            if (instance == null || m_Wrapper.m_DragActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DragActionsCallbackInterfaces.Add(instance);
            @Tap.started += instance.OnTap;
            @Tap.performed += instance.OnTap;
            @Tap.canceled += instance.OnTap;
            @Press.started += instance.OnPress;
            @Press.performed += instance.OnPress;
            @Press.canceled += instance.OnPress;
        }

        private void UnregisterCallbacks(IDragActions instance)
        {
            @Tap.started -= instance.OnTap;
            @Tap.performed -= instance.OnTap;
            @Tap.canceled -= instance.OnTap;
            @Press.started -= instance.OnPress;
            @Press.performed -= instance.OnPress;
            @Press.canceled -= instance.OnPress;
        }

        public void RemoveCallbacks(IDragActions instance)
        {
            if (m_Wrapper.m_DragActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDragActions instance)
        {
            foreach (var item in m_Wrapper.m_DragActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DragActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DragActions @Drag => new DragActions(this);
    public interface IDragActions
    {
        void OnTap(InputAction.CallbackContext context);
        void OnPress(InputAction.CallbackContext context);
    }
}
